"use client";

import { useState } from "react";
import { ui } from "../../lib/event-bridge/instance";
import { UIEventBatchItem } from "../../lib/event-bridge/types";

interface Workflow {
  id: string;
  name: string;
  description: string;
  workflow: () => void;
}

// Mock serialized event chain from AI Agent
const savedEventChain = JSON.stringify([
  { event: "todo.add", props: { title: "Analyze quarterly reports" } },
  { event: "sleep", props: { duration: 400 } },
  { event: "todo.add", props: { title: "Schedule team review meeting" } },
  { event: "sleep", props: { duration: 800 } },
  { event: "workflow.markMultiple", props: { indexes: [0, 1] } }
]);

const workflows: Workflow[] = [
  {
    id: "simple-add",
    name: "Agent: Create Task",
    description: "AI Agent creates a new task based on user request",
    workflow: () => {
      ui.add("todo.add", { title: "Research competitors' pricing models" });
    },
  },
  {
    id: "add-toggle",
    name: "Agent: Schedule & Complete",
    description: "AI Agent creates a task and marks it as completed after processing",
    workflow: () => {
      ui.add("todo.add", { title: "Generate monthly analytics report" })
        .sleep(1000)
        .add("workflow.markComplete", {});
    },
  },
  {
    id: "add-edit-complete",
    name: "Agent: Create → Refine → Complete",
    description: "AI Agent creates, refines based on new information, then completes a task",
    workflow: () => {
      ui.add("todo.add", { title: "Draft email to marketing team" })
        .sleep(500)
        .add("workflow.editTask", { newTitle: "Draft email to marketing team about Q3 campaign" })
        .sleep(500)
        .add("workflow.markComplete", {});
    },
  },
  {
    id: "add-multiple",
    name: "Agent: Multi-step Plan",
    description: "AI Agent creates a multi-step plan with several related tasks",
    workflow: () => {
      ui.add("todo.add", { title: "Gather customer feedback data" })
        .sleep(300)
        .add("todo.add", { title: "Analyze sentiment patterns" })
        .sleep(300)
        .add("todo.add", { title: "Create visualization dashboard" })
        .sleep(500)
        .add("workflow.markMultiple", { indexes: [0, 1] });
    },
  },
  {
    id: "add-delete",
    name: "Agent: Revise Plan",
    description: "AI Agent creates a task then removes it after determining it's unnecessary",
    workflow: () => {
      ui.add("todo.add", { title: "Schedule call with vendor" })
        .sleep(1000)
        .add("workflow.deleteLatest", {});
    },
  },
  {
    id: "batch-api",
    name: "Agent: Generated Workflow",
    description: "AI Agent generates a complete workflow sequence based on user request",
    workflow: () => {
      // Simulated sequence generated by AI based on user request
      const eventSequence: UIEventBatchItem[] = [
        { event: "todo.add", props: { title: "Review project requirements" } },
        { event: "sleep", props: { duration: 500 } },
        { event: "todo.add", props: { title: "Allocate team resources" } },
        { event: "sleep", props: { duration: 500 } },
        { event: "workflow.markComplete", props: {} },
      ];
      
      // Execute the AI-generated plan
      ui.batch(eventSequence);
    },
  },
  {
    id: "serialized-workflow",
    name: "Agent: Remote Plan Execution",
    description: "Executing a serialized plan received from a remote AI agent",
    workflow: () => {
      try {
        // Parse JSON event chain from AI Agent
        const deserializedEvents: UIEventBatchItem[] = JSON.parse(savedEventChain);
        
        // Execute the remote agent's plan
        ui.batch(deserializedEvents);
      } catch (error) {
        console.error("Failed to parse or execute serialized workflow:", error);
      }
    },
  },
];

export default function WorkflowList() {
  const [activeWorkflow, setActiveWorkflow] = useState<string | null>(null);

  const executeWorkflow = (workflow: Workflow) => {
    setActiveWorkflow(workflow.id);
    workflow.workflow();
    
    // Reset status after execution
    setTimeout(() => {
      setActiveWorkflow(null);
    }, 2000);
  };

  return (
    <div className="mt-12 w-full max-w-2xl mx-auto">
      <h2 className="text-xl font-semibold mb-6 text-slate-800 border-b border-slate-200 pb-3 flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
        </svg>
        AI Agent Interaction Examples
      </h2>
      <p className="text-slate-600 mb-6">
        The examples below demonstrate how an AI Agent can orchestrate complex UI interactions through 
        the UIBridge event system. Click any example to see the Agent in action.
      </p>
      <div className="space-y-4">
        {workflows.map((workflow) => (
          <div
            key={workflow.id}
            className={`
              border border-slate-200 rounded-lg p-4 
              hover:bg-slate-50 hover:border-slate-300 transition-all 
              cursor-pointer shadow-sm 
              ${activeWorkflow === workflow.id ? 'ring-2 ring-indigo-300' : ''}
            `}
            onClick={() => executeWorkflow(workflow)}
          >
            <div className="flex items-center justify-between">
              <h3 className="font-medium text-slate-800">{workflow.name}</h3>
              <span
                className={`px-3 py-1 text-xs rounded-full transition-colors ${
                  activeWorkflow === workflow.id
                    ? "bg-indigo-100 text-indigo-800"
                    : "bg-slate-100 text-slate-600"
                }`}
              >
                {activeWorkflow === workflow.id ? "Running" : "Run Simulation"}
              </span>
            </div>
            <p className="text-sm text-slate-500 mt-2">{workflow.description}</p>
          </div>
        ))}
      </div>
    </div>
  );
}
